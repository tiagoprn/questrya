{"definitions":{},"info":{"contact":{"email":"tdvservices@proton.me","responsibleDeveloper":"Tiago","responsibleOrganization":"TDS","url":"https://writeloop.dev"},"description":"A template for flask projects using celery and  sqlalchemy.","title":"questrya","version":"0.1"},"paths":{"/api/auth/login":{"post":{"parameters":[{"name":"email","required":true,"type":"string"},{"name":"password","required":true,"type":"string"}],"responses":{"200":{"description":"JWT temporary access token & JWT long-live refresh token"},"400":{"description":"client error"},"500":{"description":"server error"}},"summary":"Login","tags":["JWT Auth"]}},"/api/auth/token/new":{"post":{"responses":{"200":{"description":"JWT temporary access token"}},"summary":"Get a new JWT temporary access token (expires in 1 hour)","tags":["JWT Auth"]}},"/api/monitor/liveness":{"get":{"description":"<br/>The kubelet uses liveness probes to know when to restart a Container. For<br/>example, liveness probes could catch a deadlock, where an application is<br/>running, but unable to make progress. Restarting a Container in such a<br/>state can help to make the application more available despite bugs. This<br/>will run ON REGULAR INTERVALS.<br/>","responses":{"200":{"description":"show the app as live, with its version and the current timestamp."}},"summary":"Used by k8s, to know if a Container is live.","tags":["Monitor"]}},"/api/monitor/readiness":{"get":{"description":"<br/>The kubelet uses readiness probes to know when a container<br/>is ready to start accepting traffic.<br/><br/>A Pod is considered ready when all of its Containers are ready.<br/>One use of this signal is to control which Pods are used as<br/>backends for Services.<br/>When a Pod is not ready, it is removed from Service load balancers.<br/>This will run ONLY ONCE.<br/>","responses":{"200":{"description":"show the app as ready, with its app version and type."}},"summary":"Used by k8s, to know when a container is ready.","tags":["Monitor"]}},"/api/users/user":{"get":{"responses":{"200":{"description":"user info"},"500":{"description":"server error"}},"summary":"Get user info","tags":["Users"]},"patch":{"parameters":[{"name":"email","required":false,"type":"string"},{"name":"password","required":false,"type":"string"}],"responses":{"200":{"description":"updated user info"},"400":{"description":"client error"},"500":{"description":"server error"}},"summary":"Update user info","tags":["Users"]},"post":{"parameters":[{"name":"username","required":true,"type":"string"},{"name":"email","required":true,"type":"string"},{"name":"password","required":true,"type":"string"}],"responses":{"201":{"description":"created user data."},"400":{"description":"client error"},"500":{"description":"server error"}},"summary":"Create a new user","tags":["Users"]}}},"schemes":["http","https"],"swagger":"2.0","uiversion":2}
